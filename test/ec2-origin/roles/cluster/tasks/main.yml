---
- name: Create the VPC
  ec2_vpc:
    state: present
    cidr_block: 10.0.0.0/16
    resource_tags: 
      "Name" : "{{ aws_vpc_name }}{{ cluster_job }}"
    subnets:
        - cidr: 10.0.0.0/20
          resource_tags: { "Name":"public" } 
        - cidr: 10.0.32.0/20
          resource_tags: { "Name":"private" }
    internet_gateway: yes
    route_tables:
      - subnets:
          - 10.0.0.0/20
        routes:
          - dest: 0.0.0.0/0
            gw: igw
        resource_tags: { "Name":"rtb-public" } # helpful but need ansible version 2+
      - subnets:
          - 10.0.32.0/20
        routes:
          - dest: 0.0.0.0/0
            gw: igw
        resource_tags: { "Name":"rtb-private" } # helpful but need ansible version 2+
    region: "{{ aws_region }}"

- name: Gather all the VPC facts # using ec2_vpc_facts.py can be replaced by ec2_vpc_net_facts module in ansible 2.1+
  ec2_vpc_facts:
    region: "{{ aws_region }}"
    resource_tags: 
      "Name": "{{ aws_vpc_name }}{{ cluster_job }}"


# get subnets so we can feed the IDs to the instances

- set_fact:
   ec2_public_subnet: "{{ ec2_vpc.subnets | selectattr('tags', 'equalto', dict(Name='public')) | first}}"
   ec2_private_subnet: "{{ ec2_vpc.subnets | selectattr('tags', 'equalto', dict(Name='private')) | first}}"


- name: IP addressing
  set_fact:
    cluster_public_subnet: "172.18.64.0/20"
    cluster_service_addresses: "10.65.0.0/16"

- name: Deployer security-group
  ec2_group:
    name: "origin-deployer-group{{ cluster_job }}"
    description: "origin deployer security-group"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.id }}"
    rules:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 3128
        to_port: 3128
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
      - proto: udp
        from_port: 53
        to_port: 53
        cidr_ip: 10.0.0.0/8
      - proto: tcp
        from_port: 53
        to_port: 53
        cidr_ip: 10.0.0.0/8
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_deployer

- name: Cluster security-group
  ec2_group:
    name: "origin-cluster-group{{ cluster_job }}"
    description: "origin cluster security-group"
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.id }}"
    rules:
      - proto: all
        group_name: "origin-cluster-group{{ cluster_job }}"
      - proto: all
        group_id: "{{ sg_deployer.group_id }}"
      - proto: tcp
        from_port: 3128
        to_port: 3128
        cidr_ip: 0.0.0.0/0
      - proto: icmp
        from_port: -1
        to_port: -1
        cidr_ip: 0.0.0.0/0
    rules_egress:
      - proto: all
        cidr_ip: 0.0.0.0/0
  register: sg_cluster

- name: Create Deployer instance
  ec2:
    image: "{{ ec2_image }}"
    key_name: "{{ aws_keys }}"
    instance_tags:
      Name: "origin-deployer-{{ cluster_job }}"
      Cluster: "origin-cluster-{{ cluster_job }}"
    instance_type: t2.micro
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ ec2_public_subnet.id }}"
    group_id: "{{ sg_deployer.group_id }}"
    assign_public_ip: yes
    count_tag:
      Name: "origin-deployer-{{ cluster_job }}"
    exact_count: 1
    wait: true
  register: origin_deployer

- name: Add deployer to inventory
  add_host: name='{{ origin_deployer.tagged_instances[0].public_dns_name }}' groups=deployer ansible_ssh_user="{{ ssh_user }}"

- name: Create gateway instance
  ec2:
    image: "{{ ec2_image }}"
    key_name: "{{ aws_keys }}"
    instance_tags:
      Name: "origin-gateway-{{ cluster_job }}"
      Cluster: "origin-ansible-{{ cluster_job }}"
    instance_type: m3.medium
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ ec2_public_subnet.id }}"
    group_id: "{{ sg_cluster.group_id }}"
    assign_public_ip: yes
    source_dest_check: no
    wait: yes
    count_tag:
      Name: "origin-gateway-{{ cluster_job }}"
    exact_count: 1
    volumes:
      - device_name: /dev/xvdf
        delete_on_termination: true
        volume_type: generic
        volume_size: 40
  register: origin_gateway

- name: Create master instance
  ec2:
    image: "{{ ec2_image }}"
    key_name: "{{ aws_keys }}"
    instance_tags:
      Name: "origin-master-{{ cluster_job }}"
      Cluster: "origin-ansible-{{ cluster_job }}"
    instance_type: m3.large
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ ec2_private_subnet.id }}"
    group_id: "{{ sg_cluster.group_id }}"
    count_tag:
      Name: "origin-master-{{ cluster_job }}"
    exact_count: 1
    volumes:
      - device_name: /dev/xvdf
        delete_on_termination: true
        volume_type: generic
        volume_size: 80
  register: origin_master

- name: Add instance to masters group
  add_host: name=origin-master-"{{ cluster_job }}" groups=masters instance_ip="{{ origin_master.tagged_instances[0].private_ip }}"

- name: Create nodes
  ec2:
    image: "{{ ec2_image }}"
    key_name: "{{ aws_keys }}"
    instance_tags:
      Name: "origin-node-{{ cluster_job }}"
      Cluster: "origin-ansible-{{ cluster_job }}"
    instance_type: m3.medium
    region: "{{ aws_region }}"
    vpc_subnet_id: "{{ ec2_private_subnet.id }}"
    group_id: "{{ sg_cluster.group_id }}"
    count_tag:
      Name: "origin-node-{{ cluster_job }}"
    exact_count: 2 
    volumes:
      - device_name: /dev/xvdf
        delete_on_termination: true
        volume_type: generic
        volume_size: 80
  register: origin_nodes

- name: Update the vpc routing table (private subnet) # using ec2_vpc_rtb_update.py can be replaced with ec2_vpc_route_table in ansible 2+
  ec2_vpc_rtb_update:
    region: "{{ aws_region }}"
    vpc_id: "{{ ec2_vpc.id }}"
    subnets:
      - "{{ ec2_private_subnet.id }}"
    routes:
      - dest: "{{ cluster_service_addresses }}"
        gw: "{{ origin_gateway.tagged_instances[0].id }}"

- name: Store the status of the cluster
  template: src=status.j2 dest="{{ inventory_dir }}/cluster.status{{ cluster_job }}"

- name: Create inventory file
  template: src=inventory.j2 dest="{{ inventory_dir }}/inventory.cluster{{ cluster_job }}"
  
- name: Create squid.conf file to ship to gateway node
  template: src=squid.conf.j2 dest="{{ inventory_dir }}/roles/workspace/files/squid.conf{{ cluster_job }}"
  
- wait_for: host="{{ origin_deployer.tagged_instances[0].public_dns_name }}" port=22
